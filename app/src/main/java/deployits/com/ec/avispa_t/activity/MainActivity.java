package deployits.com.ec.avispa_t.activity;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.media.RingtoneManager;import android.net.Uri;import android.preference.PreferenceManager;import android.support.annotation.NonNull;import android.support.design.widget.NavigationView;import android.support.design.widget.TabLayout;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.app.NotificationCompat;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.support.v4.view.ViewPager;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.GridView;import android.widget.TextView;import com.ec.deployits.cupones.bean.BeanCliente;import com.ec.deployits.cupones.bean.BeanDispositivoPosicion;import com.ec.deployits.cupones.bean.BeanPromocion;import com.ec.deployits.cupones.bean.BeanSucursal;import java.text.SimpleDateFormat;import java.util.Collections;import java.util.Comparator;import java.util.Date;import deployits.com.ec.avispa_t.R;import deployits.com.ec.avispa_t.activity.menu.Categorias;import deployits.com.ec.avispa_t.activity.menu.ComerciosFavoritos;import deployits.com.ec.avispa_t.activity.menu.ListaDeCuponesGenerados;import deployits.com.ec.avispa_t.hilos.HiloCategorias;import deployits.com.ec.avispa_t.hilos.HiloComercios;import deployits.com.ec.avispa_t.hilos.HiloCupones;import deployits.com.ec.avispa_t.activity.notificaciones.SinConexionActivity;import deployits.com.ec.avispa_t.activity.sesion.LoginActivity;import deployits.com.ec.avispa_t.bean.BeanMensajeSistema;import deployits.com.ec.avispa_t.conexion.Conexion;import deployits.com.ec.avispa_t.excepcion.ConexionHostExcepcion;import deployits.com.ec.avispa_t.fragment.cupon.DetalleDeCupon;import deployits.com.ec.avispa_t.preferencias.Preferencias;import deployits.com.ec.avispa_t.utilidad.MetodoPara;import deployits.com.ec.avispa_t.utilidad.TabPageAdapter;import deployits.com.ec.avispa_t.adaptador.TodosLosComerciosAdaptador;import deployits.com.ec.avispa_t.adaptador.TodosLosCuponesAdaptador;import deployits.com.ec.avispa_t.fragment.tab.TodosLosComerciosFragment;import deployits.com.ec.avispa_t.fragment.tab.TodosLosCuponesFragment;import deployits.com.ec.avispa_t.global.Globales;import java.util.List;import java.util.Timer;import java.util.TimerTask;import android.os.Handler;public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {    private TodosLosComerciosAdaptador comerciosAdaptador;    private TodosLosCuponesAdaptador cuponesAdaptador;    private ArrayAdapter adapter;    private NavigationView navigationView;    private Menu menu;    private Timer timer;    private TimerTask timerTask;    private boolean hayConexion;    private BeanMensajeSistema mensajeSistema;    //we are going to use a handler to be able to run in our TimerTask    final Handler handler = new Handler();    // Variable para el tratamiento de las preferencias    public static SharedPreferences preferenciasPublicas;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        MetodoPara.permisoDeEjecucion();        mensajeSistema = new BeanMensajeSistema(MainActivity.this);        hayConexion = MetodoPara.haveNetworkConnection(this); // MetodoPara.isConnected(this);        if (!hayConexion) {            mensajeSistema.mostrarMensajeToastActivity("Sin conexi√≥n main onCreate");            Intent intent = new Intent(this, SinConexionActivity.class);            startActivity(intent);            System.out.println("-------------------------------------------------");            System.out.println("-----   se va a SinConexionActivity   ------");            System.out.println("-------------------------------------------------");            finish();            overridePendingTransition(R.transition.fade_in, R.transition.fade_out);        }        Globales.beanCliente = MetodoPara.traerPreferenciaBeanCliente(this);        HiloComercios hcomercio = new HiloComercios();        HiloCategorias hCategoria = new HiloCategorias();        HiloCupones hCupones = new HiloCupones();        hCategoria.start();        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        System.out.println("Ejecuta el hilo Categoria " + formato.format(new Date()));        hcomercio.start();        System.out.println("Ejecuta el hilo Comercio " + formato.format(new Date()));        hCupones.start();        while (hCategoria.isCompletado() || hcomercio.isCompletado() || hCupones.isCompletado()) {        }        boolean appYaInstalada = MetodoPara.leerValorBool(this, "appYaInstalada");        if (!appYaInstalada) {            Globales.beanCliente = new BeanCliente();            Intent irAcategorias = new Intent(this, Categorias.class);            startActivity(irAcategorias);            // esta es una animacion que desvanece el activity actual para dar paso al siguiente            overridePendingTransition(R.transition.fade_in, R.transition.fade_out);            MetodoPara.guardarValorBool(this, "appYaInstalada", true);//si es false significa que es la primera ejecucion de la app            MetodoPara.guardarValorBool(this, "inicioYaGenerado", false);            //preguntamos si quiere activar su posicion en el dispositivo//            BeanDispositivoPosicion beanDispositivoPosicion = MetodoPara.localizarPosicionDispositivo(getApplicationContext(), MainActivity.this);            System.out.println("-------------------------------------------------");//            System.out.println("beanDispositivoPosicion " + beanDispositivoPosicion);            System.out.println("-------------------------------------------------");        }        System.out.println("Completado " + formato.format(new Date()));        MetodoPara.ordenarCuponesComerciosPorCategorias();        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        DrawerLayout drawer = findViewById(R.id.drawer_layout);        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.addDrawerListener(toggle);        toggle.syncState();        Globales.fab = findViewById(R.id.fab);        Globales.fab.setVisibility(View.GONE);        navigationView = findViewById(R.id.nav_view);        navigationView.setNavigationItemSelectedListener(this);        menu = navigationView.getMenu();        String nombre = MetodoPara.leerValor(this, "nombre");        if (Globales.beanCliente.getIdUsuario() == null || nombre.length() == 0) {            menu.findItem(R.id.inicio_sesion).setVisible(true);            menu.findItem(R.id.cerrar_sesion).setVisible(false);        } else {            menu.findItem(R.id.inicio_sesion).setVisible(false);            menu.findItem(R.id.cerrar_sesion).setVisible(true);        }        TodosLosComerciosFragment tabTodosLosComercios = new TodosLosComerciosFragment();        TodosLosCuponesFragment tabTodosLosCupones = new TodosLosCuponesFragment();        //para cargar los fragments de los Tabs        TabPageAdapter mTabPageAdapter = new TabPageAdapter(getSupportFragmentManager());        mTabPageAdapter.addFragment(tabTodosLosComercios, "comercios");        mTabPageAdapter.addFragment(tabTodosLosCupones, "cupones");        ViewPager mViewPager = findViewById(R.id.containerViewPager);        mViewPager.setAdapter(mTabPageAdapter);        //searchViewCode(lstCategoriasArray);        Globales.tabLayout = findViewById(R.id.tabs);        Globales.tabLayout.setupWithViewPager(mViewPager);        mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(Globales.tabLayout));        Globales.tabLayout.addOnTabSelectedListener(new TabLayout.ViewPagerOnTabSelectedListener(mViewPager));        obtenerNombreDeUsuario();        // Preferencias        preferenciasPublicas = PreferenceManager.getDefaultSharedPreferences(getBaseContext());    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);/*        MenuItem item = menu.findItem(R.id.action_search);        searchView.setMenuItem(item);*/        adapter = new ArrayAdapter <>(this,                R.layout.spinner_item, Globales.lstCategoriasStrSpinner);        Globales.spinner = findViewById(R.id.spinner);        Globales.spinner.setAdapter(adapter);        Globales.spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView <?> adapter, View vies, int position, long id) {                String valorSpinner = Globales.spinner.getItemAtPosition(position).toString();//obtenemos el valor del item                System.out.println("entra en onCreateOptionsMenu");                if (valorSpinner != null) {                    if (!Globales.regresoMainActivityBtnFlotante) //controla el regreso con el boton flotante                        Globales.regresoMainActivityBtnFlotante = false;                    actualizarListas(valorSpinner);                }            }            @Override            public void onNothingSelected(AdapterView <?> adapter) {            }        });        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            startActivity(new Intent(this, Preferencias.class));            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public boolean onNavigationItemSelected(@NonNull MenuItem item) {//        Fragment fragmento = null;        BeanMensajeSistema mensaje = new BeanMensajeSistema(this);        int id = item.getItemId();        if (id == R.id.inicio_sesion) {            Intent irAloginActivity = new Intent(getApplicationContext(), LoginActivity.class);            startActivity(irAloginActivity);            overridePendingTransition(R.transition.fade_in, R.transition.fade_out);        } else if (id == R.id.comercios_favoritos) {            if (Globales.beanCliente.getCorreo() == null) {                mensaje.mostrarMensajeToastActivity("Inicie sesi√≥n para ver sus favoritos");            } else {                Intent irAcomerciosFavoritosActivity = new Intent(getApplicationContext(), ComerciosFavoritos.class);                startActivity(irAcomerciosFavoritosActivity);                overridePendingTransition(R.transition.fade_in, R.transition.fade_out);            }        } else if (id == R.id.lista_de_cupones) {            if (Globales.beanCliente.getCorreo() == null) {                mensaje.mostrarMensajeToastActivity("Inicie sesi√≥n para ver sus cupones");            } else {                Intent irAlistaDeCuponesGenerados = new Intent(getApplicationContext(), ListaDeCuponesGenerados.class);                startActivity(irAlistaDeCuponesGenerados);                overridePendingTransition(R.transition.fade_in, R.transition.fade_out);            }        } else if (id == R.id.cerrar_sesion) {            //con esto anulamos el beanCliente            MetodoPara.guardarValor(this, "idUsuario", "");            Globales.beanCliente = MetodoPara.traerPreferenciaBeanCliente(this);            MetodoPara.cargarValoresDelSistema();            actualizarListas(Globales.item_Spinner_todas_las_categorias);            obtenerNombreDeUsuario();            //metodo para vaciar los fragments, es decir eliminar los fragments            FragmentManager fm = this.getSupportFragmentManager();            for (int i = 0; i < fm.getBackStackEntryCount(); ++i) {                fm.popBackStack();            }            Globales.tabLayout.setVisibility(View.VISIBLE);            Globales.spinner.setVisibility(View.VISIBLE);            mensaje.mostrarMensajeToastActivity("Ha finalizado sesi√≥n");            menu.findItem(R.id.cerrar_sesion).setVisible(false);            menu.findItem(R.id.inicio_sesion).setVisible(true);        } else if (id == R.id.categorias) {            Intent irAcategorias = new Intent(getApplicationContext(), Categorias.class);            startActivity(irAcategorias);            overridePendingTransition(R.transition.fade_in, R.transition.fade_out);      /*  } else if (id == R.id.mapa) {            fragmento = GoogleMapsFragmento.newInstance();            // Metodo para mostrar los fragmentos            showFragment(fragmento);      */        }        DrawerLayout drawer = findViewById(R.id.drawer_layout);        drawer.closeDrawer(GravityCompat.START);        return true;    }    public void actualizarListas(String valorSpinner) {        System.out.println("______________________________________________________________________________________");        System.out.println("-> ");        System.out.println("-> ACTUALIZAR LISTA DE CUPONES Y CATEGORIAS desde Spinner");        System.out.println("______________________________________________________________________________________");        GridView grdvComercios = findViewById(R.id.grdvComercios);        comerciosAdaptador = new TodosLosComerciosAdaptador(this, Globales.lstComerciosPorCategoriaAdaptador);        comerciosAdaptador.setNotifyOnChange(true);        grdvComercios.setAdapter(comerciosAdaptador);        GridView grdvCupones = findViewById(R.id.grdvCupones);        cuponesAdaptador = new TodosLosCuponesAdaptador(this, Globales.lstCuponesPorCategoriaAdaptador);        cuponesAdaptador.setNotifyOnChange(true);        grdvCupones.setAdapter(cuponesAdaptador);        Globales.lstComerciosPorCategoriaAdaptador.clear();        Globales.lstCuponesPorCategoriaAdaptador.clear();        //se carga de acuerdo al item seleccionado en el Spinner        if (valorSpinner.equals(Globales.item_Spinner_todas_las_categorias)) {            for (BeanPromocion promocion : Globales.lstTodosLosCuponesSistema) {                Globales.lstCuponesPorCategoriaAdaptador.add(promocion);            }            for (BeanSucursal sucursal : Globales.lstTodosLosComerciosSistema) {                Globales.lstComerciosPorCategoriaAdaptador.add(sucursal);            }        } else {            int i, j = 0, idEmpresa;            for (i = 0; i < Globales.lstTodosLosComerciosSistema.size(); i++) {                if (Globales.lstTodosLosComerciosSistema.get(i).getCategoria().equals("-".concat(valorSpinner))) {                    Globales.lstComerciosPorCategoriaAdaptador.add(Globales.lstTodosLosComerciosSistema.get(i));                    idEmpresa = Globales.lstComerciosPorCategoriaAdaptador.get(j).getIdEmpresa();// cojemos el idEmpresa                    cargarCuponesPorCategoria(idEmpresa);//por cada empresa cargamos sus cupones                    j++;                }            }        }        //SE ORDENA DE ACUERDO A LAS CATEGORIAS SELECCIONADAS        //este comparator es muy √∫til        Comparator <BeanPromocion> c1 = new Comparator <BeanPromocion>() {            public int compare(BeanPromocion p1, BeanPromocion p2) {                return p1.getIdPromocion().compareTo(p2.getIdPromocion());            }        };        //primero se ordena la lista        Collections.sort(Globales.lstCuponesPorCategoriaAdaptador, c1);        Comparator <BeanSucursal> c2 = new Comparator <BeanSucursal>() {            public int compare(BeanSucursal p1, BeanSucursal p2) {//se multiplica por -1 para orden inverso                return (-1) * p1.getCategoriaFavorita().compareTo(p2.getCategoriaFavorita());            }        };        Collections.sort(Globales.lstComerciosPorCategoriaAdaptador, c2);        comerciosAdaptador.notifyDataSetChanged();        cuponesAdaptador.notifyDataSetChanged();    }    public void cargarCuponesPorCategoria(Integer idEmpresa) {        for (int i = 0; i < Globales.lstTodosLosCuponesSistema.size(); i++) {            if (Globales.lstTodosLosCuponesSistema.get(i).getIdEmpresa() == idEmpresa) {                Globales.lstCuponesPorCategoriaAdaptador.add(Globales.lstTodosLosCuponesSistema.get(i));            }        }    }    public void obtenerNombreDeUsuario() {        NavigationView navigationView = findViewById(R.id.nav_view);        if (navigationView != null) {            View hView = navigationView.getHeaderView(0);            TextView nav_user = hView.findViewById(R.id.nav_name);            String nombre = MetodoPara.leerValor(this, "nombre");            String bienvenido = getString(R.string.bienvenido);            String hola = getString(R.string.hola);            if (Globales.beanCliente.getCorreo() == null || nombre.length() == 0) {                nav_user.setText(bienvenido);            } else {                nav_user.setText("¬°" + hola + " " + nombre + "!");                //      ImageView imgvw = (ImageView) hView.findViewById(R.id.imageView);// COLOCAR LA IMAGEN DE FOTO        imgvw.setImageResource();            }        }    }    @Override    public void onStart() {        super.onStart();    }    @Override    public void onBackPressed() {        //poner el super.onBackPressed(); en primer lugar, sino no funciona        super.onBackPressed();// elimina los fragmentos del contenedor//        System.out.println("fragment "+getSupportFragmentManager().findFragmentById(R.id.contenedor));        if (getSupportFragmentManager().findFragmentById(R.id.contenedor) == null) {            Globales.tabLayout.setVisibility(View.VISIBLE);            Globales.spinner.setVisibility(View.VISIBLE);        }    }    @Override    public void onRestart() {        super.onRestart();        System.out.println("-------------------------------------------------");        System.out.println("-------    ON RESTART - MainActivity    ---------");        System.out.println("-------------------------------------------------");        Globales.regresoMainActivityBtnFlotante = false;        hayConexion = MetodoPara.haveNetworkConnection(this); // MetodoPara.isConnected(this);        if (Globales.regresoDesdeSinConexionActivity) {            if (hayConexion) {                Globales.regresoDesdeSinConexionActivity = false;                // reiniciamos el activity, es decir lo volvemos a recargar                finish();                startActivity(getIntent());                System.out.println("-------------------------------------------------");                System.out.println("-----  restart MainActivity desde hayConexion?  -----");                System.out.println("-------------------------------------------------");            }        } else {            actualizarListas(Globales.item_Spinner_todas_las_categorias);            if (Globales.beanCliente.getIdUsuario() == null) {                menu.findItem(R.id.cerrar_sesion).setVisible(false);                menu.findItem(R.id.inicio_sesion).setVisible(true);            } else {                menu.findItem(R.id.cerrar_sesion).setVisible(true);                menu.findItem(R.id.inicio_sesion).setVisible(false);            }            obtenerNombreDeUsuario();        }        verificacionTimerNotificacionPush();    }    public void verificacionTimerNotificacionPush() {        if (preferenciasPublicas.getBoolean("notificacion_push", true)) {            System.out.println("-------------------------------------------------------------");            System.out.println("      startTimer() - Notificaciones Push      ");            System.out.println("-------------------------------------------------------------");            startTimer();// se inicializa, ya que al ir a SinConexionActivity se uso stopTimer()        } else {            System.out.println("-------------------------------------------------------------");            System.out.println("      stoptimertask(getCurrentFocus()) - Notificaciones Push");            System.out.println("-------------------------------------------------------------");            stoptimertask(getCurrentFocus());        }    }    @Override    protected void onResume() {        super.onResume();        // verificamos la preferencia, si debe ejecutarse las notificaciones Push()        verificacionTimerNotificacionPush();        String cuponFragment = getIntent().getStringExtra("detalleCupon");        System.out.println("---------------");        System.out.println("cuponFragment onCreate " + cuponFragment);        System.out.println("---------------");        // If cuponFragment is defined, then this notification was launched with a fragment selection        if (cuponFragment != null) {            // Here we can decide what do to -- perhaps load other parameters from the intent extras such as IDs, etc            if (cuponFragment.equals("detalleCupon")) { /*               Bundle args = new Bundle();                args.putInt("idPromocion", idPromocion);                args.putString("nombreEmpresa", beanSucursal.getNombre());                args.putDouble("longitud", beanSucursal.getLongitud());                args.putDouble("latitud", beanSucursal.getLatitud());*/                DetalleDeCupon detalleDeCupon = new DetalleDeCupon();                detalleDeCupon.setArguments(getIntent().getExtras());                FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();                transaction.replace(android.R.id.content, detalleDeCupon).commit();            }        }        if (Globales.seActivoLogin) {            Globales.seActivoLogin = false;            actualizarListas(Globales.item_Spinner_todas_las_categorias);            if (Globales.beanCliente.getIdUsuario() == null) {                menu.findItem(R.id.cerrar_sesion).setVisible(false);                menu.findItem(R.id.inicio_sesion).setVisible(true);            } else {                menu.findItem(R.id.cerrar_sesion).setVisible(true);                menu.findItem(R.id.inicio_sesion).setVisible(false);            }            obtenerNombreDeUsuario();        }    }    public void startTimer() {        System.out.println("-------------------------------------------------");        System.out.println(" antes de if (timer == null) ");        System.out.println("-------------------------------------------------");        //set a new Timer        if (timer == null) {            System.out.println("-------------------------------------------------");            System.out.println(" entra if (timer == null) ");            System.out.println("-------------------------------------------------");            timer = new Timer();            //initialize the TimerTask's job// importantisimo para iniciar las peticiones al servidor            initializeTimerTask();            //programamos el tiempo, empezar√° despues de 5000ms la ejecucion del TimerTask y seguir√° ejecutandose cada 10000ms            timer.schedule(timerTask, 5000, 60000); //        }    }    public void stoptimertask(View v) {        //stop the timer, if it's not already null        if (timer != null) {            timer.cancel();            timer = null;        }    }    public void initializeTimerTask() {        System.out.println("-------------------------------------------------");        System.out.println(" entra initializeTimerTask ");        System.out.println("-------------------------------------------------");        timerTask = new TimerTask() {            public void run() {                //use a handler to run a toast that shows the current timestamp                handler.post(new Runnable() {                    public void run() {                        hayConexion = MetodoPara.haveNetworkConnection(MainActivity.this); //MetodoPara.isConnected(MainActivity.this);                        if (hayConexion) {                            Conexion conexion = new Conexion();                            BeanDispositivoPosicion beanDispositivoPosicion = MetodoPara.localizarPosicionDispositivo(getApplicationContext(), MainActivity.this);                            System.out.println("-------------------------------------------------");                            System.out.println("beanDispositivoPosicion " + beanDispositivoPosicion);                            System.out.println("-------------------------------------------------");                            List <BeanPromocion> lstPromociones = null;                            try {                                lstPromociones = conexion.notificarNuevasPromocionesCercanas(beanDispositivoPosicion);                            } catch (ConexionHostExcepcion conexionHostExcepcion) {                                try {                                    lstPromociones = conexion.notificarNuevasPromocionesCercanas(beanDispositivoPosicion);                                } catch (ConexionHostExcepcion conexionHostExcepcion1) {                                    conexionHostExcepcion1.printStackTrace();                                }                            }                            if (lstPromociones == null) {                            } else {                                System.out.println("-------------------------------------------------");                                System.out.println("lstPromociones.size() " + lstPromociones.size());                                System.out.println("-------------------------------------------------");                                for (BeanPromocion promocion : lstPromociones) {                                    BeanSucursal sucursal = obtenerSucursalPorIdSucursal(promocion.getIdPromocion());                                    System.out.println("-------------------------------------------------");                                    System.out.println(promocion);                                    System.out.println("-------------------------------------------------");                                    System.out.println("-------------------------------------------------");                                    System.out.println(sucursal);                                    System.out.println("-------------------------------------------------");                                    showNotification(promocion, sucursal);                                }                            }                        } else {                            Intent intent = new Intent(getApplicationContext(), SinConexionActivity.class);                            startActivity(intent);                            System.out.println("-------------------------------------------------");                            System.out.println("-----   ir a SinConexionActivity desde Main   ------");                            System.out.println("-------------------------------------------------");                            mensajeSistema = new BeanMensajeSistema(getApplicationContext());                            mensajeSistema.mostrarMensajeToastContext("Sin conexi√≥n main else timer");                            stoptimertask(getCurrentFocus());                            finish();                            overridePendingTransition(R.transition.fade_in, R.transition.fade_out);                        }                    }                });            }        };    }    // you can use this method to show notification in both api -27 and +27    private void showNotification(BeanPromocion promocion, BeanSucursal sucursal) {        NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {            CharSequence name = getString(R.string.channel_name);            String description = getString(R.string.channel_description);            int importance = NotificationManager.IMPORTANCE_DEFAULT;            NotificationChannel channel = new NotificationChannel("default", name, importance);            channel.enableLights(true);            channel.setLightColor(Color.RED);            channel.enableVibration(true);            channel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});            channel.setDescription(description);            mNotificationManager.createNotificationChannel(channel);        }        String title = promocion.getTitulo();        String content = promocion.getDetalle();        Uri alarmSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);        NotificationCompat.Builder mBuilder = new NotificationCompat                .Builder(getApplicationContext(), "default")                .setSmallIcon(R.mipmap.ic_launcher) // notification icon                .setContentTitle(title) // title for notification                .setContentText(content)// message for notification                .setSound(alarmSound) // set alarm sound for notification                .setAutoCancel(true); // clear notification after click        Intent notificationIntent = new Intent(getApplicationContext(), MainActivity.class); // con esto abre MainActivity        notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        notificationIntent.putExtra("detalleCupon", "detalleCupon");        notificationIntent.putExtra("idPromocion", promocion.getIdPromocion());        notificationIntent.putExtra("nombreEmpresa", sucursal.getNombre());        notificationIntent.putExtra("longitud", sucursal.getLongitud());        notificationIntent.putExtra("latitud", sucursal.getLatitud());        PendingIntent pi = PendingIntent.getActivity(this, 100, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);        mBuilder.setContentIntent(pi);        mNotificationManager.notify(0, mBuilder.build());    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        setIntent(intent);    }    public BeanSucursal obtenerSucursalPorIdSucursal(Integer idSucursal) {        BeanSucursal beanSucursal = new BeanSucursal();        for (BeanSucursal sucursal : Globales.lstTodosLosComerciosSistema) {            if (sucursal.getIdEmpresa() == idSucursal) {                beanSucursal = sucursal;                break;            }        }        return beanSucursal;    }}